$date
	Mon Jul 01 22:37:47 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module main $end
$var wire 8 ! w_valor_troco [7:0] $end
$var wire 8 " w_produto_vendido [7:0] $end
$var wire 8 # w_produto_escolhido [7:0] $end
$var wire 24 $ w_moedas_inseridas [23:0] $end
$var wire 24 % w_moedas_carteira [23:0] $end
$var wire 2 & w_inserir_dinheiro [1:0] $end
$var wire 2 ' w_escolher [1:0] $end
$var wire 4 ( w_dinheiro_inserido_u [3:0] $end
$var wire 4 ) w_dinheiro_inserido_d [3:0] $end
$var wire 4 * w_dinheiro_inserido_c [3:0] $end
$var wire 8 + w_dinheiro_inserido [7:0] $end
$var wire 2 , w_dar_troco [1:0] $end
$var wire 8 - w_carteira [7:0] $end
$var reg 1 . clock $end
$var reg 1 / reset_n $end
$scope module source $end
$var wire 1 . clock $end
$var wire 1 / reset_n $end
$var reg 2 0 dar_troco [1:0] $end
$var reg 8 1 dinheiro_inserido [7:0] $end
$var reg 2 2 escolher [1:0] $end
$var reg 2 3 inserir_dinheiro [1:0] $end
$var reg 24 4 moedas_inseridas [23:0] $end
$var reg 8 5 produto_escolhido [7:0] $end
$upscope $end
$scope module vm $end
$var wire 1 . clock $end
$var wire 2 6 dar_troco [1:0] $end
$var wire 8 7 dinheiro_inserido [7:0] $end
$var wire 2 8 escolher [1:0] $end
$var wire 2 9 inserir_dinheiro [1:0] $end
$var wire 24 : moedas_inseridas [23:0] $end
$var wire 8 ; produto_escolhido [7:0] $end
$var wire 1 / reset_n $end
$var reg 8 < carteira [7:0] $end
$var reg 12 = cdu [11:0] $end
$var reg 4 > dinheiro_inserido_c [3:0] $end
$var reg 4 ? dinheiro_inserido_d [3:0] $end
$var reg 4 @ dinheiro_inserido_u [3:0] $end
$var reg 2 A estado_atual [1:0] $end
$var reg 24 B moedas_carteira [23:0] $end
$var reg 24 C moedas_troco [23:0] $end
$var reg 8 D price [7:0] $end
$var reg 8 E produto_vendido [7:0] $end
$var reg 8 F valor_troco [7:0] $end
$scope function bin2bcd $end
$upscope $end
$scope function calcular_moedas_troco $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
0/
0.
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#5
1.
#10
0.
1/
b1 #
b1 5
b1 ;
b1 '
b1 2
b1 8
#15
b1 A
1.
#20
0.
b10000000100000000 $
b10000000100000000 4
b10000000100000000 :
b10010110 +
b10010110 1
b10010110 7
b1 &
b1 3
b1 9
b0 '
b0 2
b0 8
#25
b10 A
b110010 D
1.
#30
0.
b1 ,
b1 0
b1 6
b0 &
b0 3
b0 9
#35
b11 A
b10000000100000000 %
b10000000100000000 B
b101 )
b101 ?
b1 *
b1 >
b101010000 =
1.
#40
0.
b0 $
b0 4
b0 :
b0 +
b0 1
b0 7
b0 #
b0 5
b0 ;
b0 ,
b0 0
b0 6
#45
1.
#50
0.
b10 #
b10 5
b10 ;
b1 '
b1 2
b1 8
#55
b1 A
1.
#60
0.
b100000010 $
b100000010 4
b100000010 :
b1100100 +
b1100100 1
b1100100 7
b1 &
b1 3
b1 9
b0 '
b0 2
b0 8
#65
b10 A
b1001011 D
1.
#70
0.
b1 ,
b1 0
b1 6
b0 &
b0 3
b0 9
#75
b11 A
b10000001000000010 %
b10000001000000010 B
b0 )
b0 ?
b100000000 =
1.
#80
0.
#85
b1001011 -
b1001011 <
b10000001000000001 %
b10000001000000001 B
b1 C
b11001 !
b11001 F
1.
#90
0.
#95
bx C
1.
#100
0.
#105
bx C
1.
#110
0.
#115
bx C
1.
#120
0.
#125
bx C
1.
#130
0.
#135
bx C
1.
#140
0.
#145
bx C
1.
#150
0.
#155
bx C
1.
#160
0.
#165
bx C
1.
#170
0.
#175
bx C
1.
#180
0.
#185
bx C
1.
#190
0.
#195
bx C
1.
#200
0.
#205
bx C
1.
#210
0.
#215
bx C
1.
#220
0.
#225
bx C
1.
#230
0.
#235
bx C
1.
#240
0.
#245
bx C
1.
#250
0.
#255
bx C
1.
#260
0.
#265
bx C
1.
#270
0.
#275
bx C
1.
#280
0.
#285
bx C
1.
#290
0.
#295
bx C
1.
#300
0.
#305
bx C
1.
#310
0.
